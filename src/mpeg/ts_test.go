package mpeg

import (
	"testing"
)

var PID_0_PAT = TsFrame{
	0x47, 0x40, 0x00, 0x1f, 0x00, 0x00, 0xb0, 0x0d, 0x00, 0x80, 0xc1, 0x00, 0x00, 0x01, 0x00, 0xf0,
	0x00, 0xd5, 0xa5, 0xbb, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
}

var PID_4096_PMT = TsFrame{
	0x47, 0x50, 0x00, 0x1f, 0x00, 0x02, 0xb0, 0x17, 0x01, 0x00, 0xc1, 0x00, 0x00, 0xe7, 0xd1, 0xf0,
	0x00, 0x1b, 0xe7, 0xd1, 0xf0, 0x00, 0x04, 0xe7, 0xd2, 0xf0, 0x00, 0xd6, 0x07, 0x41, 0xda, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
}

func Test_Ts_TeiRoundtrip(t *testing.T) {
	pkts := []*TsFrame{
		&PID_0_PAT,
		&PID_4096_PMT,
	}

	for _, pkt := range pkts {
		var frm = TsFrame(*pkt)
		buf := frm.ToBuffer()

		buf.SetTei(buf.GetTei())

		if frm != *pkt {
			t.Error("Writeback broke TEI")
			return
		}
	}
}

func Test_Ts_PusiRoundtrip(t *testing.T) {
	pkts := []*TsFrame{
		&PID_0_PAT,
		&PID_4096_PMT,
	}

	for _, pkt := range pkts {
		var frm = TsFrame(*pkt)
		buf := frm.ToBuffer()

		buf.SetPusi(buf.GetPusi())

		if frm != *pkt {
			t.Error("Writeback broke PUSI")
			return
		}
	}
}

func Test_Ts_TpRoundtrip(t *testing.T) {
	pkts := []*TsFrame{
		&PID_0_PAT,
		&PID_4096_PMT,
	}

	for _, pkt := range pkts {
		var frm = TsFrame(*pkt)
		buf := frm.ToBuffer()

		buf.SetTp(buf.GetTp())

		if frm != *pkt {
			t.Error("Writeback broke TEI")
			return
		}
	}
}

func Test_Ts_PidRoundtrip(t *testing.T) {
	pkts := []*TsFrame{
		&PID_0_PAT,
		&PID_4096_PMT,
	}

	for _, pkt := range pkts {
		var frm = TsFrame(*pkt)
		buf := frm.ToBuffer()

		buf.SetPid(buf.GetPid())

		if frm != *pkt {
			t.Error("Writeback broke PID")
			return
		}

		for i := 0; i < 2*MAX_PIDS; i++ {
			pid := PID(i)

			buf.SetPid(pid)

			if buf.GetPid() != (pid % MAX_PIDS) {
				t.Error("Failed to roundtrip for PID", pid)
				return
			}
		}
	}
}

func Test_Ts_CcRoundtrip(t *testing.T) {
	pkts := []*TsFrame{
		&PID_0_PAT,
		&PID_4096_PMT,
	}

	for _, pkt := range pkts {
		var frm = TsFrame(*pkt)
		buf := frm.ToBuffer()

		buf.SetCc(buf.GetCc())

		if frm != *pkt {
			t.Error("Writeback broke CC")
			return
		}

		for i := 0; i < 2*MAX_CC; i++ {
			cc := CC(i)

			buf.SetCc(cc)

			if buf.GetCc() != (cc % MAX_CC) {
				t.Error("Failed to roundtrip for CC", cc)
				return
			}
		}
	}
}

func Test_Ts_Payload(t *testing.T) {
	pkts := []*TsFrame{
		&PID_0_PAT,
		&PID_4096_PMT,
	}

	for _, pkt := range pkts {
		var frm = TsFrame(*pkt)
		buf := frm.ToBuffer()

		payload := buf.GetPayload()

		if len(payload) != TS_MAX_PAYLOAD_LENGTH {
			t.Errorf("Got payload length %d, expected %d", len(payload), TS_MAX_PAYLOAD_LENGTH)
			return
		}
	}
}
